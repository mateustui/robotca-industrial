{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Q3_Lucas","provenance":[],"authorship_tag":"ABX9TyOM62hBflUXaHN3dkvyNO0w"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":926},"id":"VJzMRYiLHtyu","executionInfo":{"status":"ok","timestamp":1651524954358,"user_tz":180,"elapsed":566,"user":{"displayName":"Mateus Falcao","userId":"10538354954732698151"}},"outputId":"a2ece547-c1d8-4093-e5c9-e30da4b15f41"},"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 0.70710678 -0.70710678  8.        ]\n"," [ 0.70710678  0.70710678  5.        ]\n"," [ 0.          0.          1.        ]]\n","[[ 0.8660254  0.5        2.       ]\n"," [-0.5        0.8660254 -5.       ]\n"," [ 0.         0.         1.       ]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["Coordenadas do vetor no sistema {A}:\n","[x]=[6.000000]\n","[y]=[3.000000]\n","\n","Coordenadas do vetor no sistema {B}:\n","[x]=[-2.828427]\n","[y]=[-0.000000]\n","\n","Coordenadas do vetor no sistema {C}:\n","[x]=[-0.535898]\n","[y]=[8.928203]\n","\n","Verifique no gráfico a coerência das coordenadas!\n"]}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from matplotlib.ticker import (AutoMinorLocator, MultipleLocator)\n","\n","######################################################################################\n","############################### FUNÇÕES DE ROTAÇÃO ###################################\n","######################################################################################\n","\n","#Função que cria matrizes de rotação\n","def rot2d(ang,xt,yt):\n","  #Criação da matriz R \n","  theta = np.radians(ang)\n","  ct = np.cos(theta)\n","  st = np.sin(theta)\n","  return np.array(( (ct, -st, xt), \n","                    (st,  ct, yt),\n","                    (0 , 0  , 1 )))\n","  \n","######################################################################################\n","############################### APLICANDO AS ROTAÇÕES ################################\n","######################################################################################\n","\n","\n","Op = np.array((0,0,1)) #\n","Xp = np.array((6,0,1)) # \n","Yp = np.array((0,3,1)) # \n","\n","\n","R = rot2d(45,8,5) #Criação da matriz R \n","R2 = rot2d(-30,2,-5) #Criação da matriz R \n","\n","\n","print(R)\n","print(R2)\n","\n","\n","\n","\n","\n","# Vetores dados no sistema {A}\n","Oa = np.array((0,0,1)) #Origem de {A}\n","Xa = np.array((3,0,1)) # seta do eixo x (vermelho)\n","Ya = np.array((0,3,1)) # seta do eixo y (azul)\n","\n","Ob = np.dot(R,Oa) # Origem de {A} rotacionada para o sistema {B}\n","Xb = np.dot(R,Xa) # seta do eixo x (vermelho), rotacionada para o sistema {B}\n","Yb = np.dot(R,Ya) # seta do eixo y (azul), rotacionada para o sistema {B}\n","\n","\n","Oc = np.dot(R2,Oa) # Origem de {A} rotacionada para o sistema {B}\n","Xc = np.dot(R2,Xa) # seta do eixo x (vermelho), rotacionada para o sistema {B}\n","Yc = np.dot(R2,Ya) # seta do eixo y (azul), rotacionada para o sistema {B}\n","\n","Va = np.array((6,3,1)) #seta do vetor (verde)\n","\n","\n","\n","######################################################################################\n","############################### PLOT #################################################\n","######################################################################################\n","plt.figure(figsize=(10,10))\n","ax = plt.gca()\n","\n","# Plota o vetor [v]\n","#ax.quiver(Oa[0], Oa[1], Va[0], Va[1], color='g', width = 0.01, angles='xy', scale_units='xy', scale=1)\n","\n","ax.plot(Va[0],Va[1],'g*')\n","\n","\n","orig=np.array((0,0,1))\n","\n","\n","ax.quiver(Oa[0], Oa[1], Xa[0], Xa[1], color='r', width = 0.01, angles='xy', scale_units='xy', scale=1)\n","ax.quiver(Oa[0], Oa[1], Ya[0], Ya[1], color='b', width = 0.01, angles='xy', scale_units='xy', scale=1)\n","\n","ax.quiver(Ob[0], Ob[1], Xb[0]-Ob[0], Xb[1]-Ob[1], color='r', width = 0.01, angles='xy', scale_units='xy', scale=1)\n","ax.quiver(Ob[0], Ob[1], Yb[0]-Ob[0], Yb[1]-Ob[1], color='b', width = 0.01, angles='xy', scale_units='xy', scale=1)\n","\n","\n","ax.quiver(Oc[0], Oc[1], Xc[0]-Oc[0], Xc[1]-Oc[1], color='r', width = 0.01, angles='xy', scale_units='xy', scale=1)\n","ax.quiver(Oc[0], Oc[1], Yc[0]-Oc[0], Yc[1]-Oc[1], color='b', width = 0.01, angles='xy', scale_units='xy', scale=1)\n","\n","ax.xaxis.set_major_locator(MultipleLocator(1))\n","ax.yaxis.set_major_locator(MultipleLocator(1))\n","\n","\n","lim = 10\n","ax.set_xlim(-0.5, lim+1)\n","ax.set_ylim(-lim+3,lim)\n","ax.set_aspect('equal', 'box')\n","\n","plt.grid(True)\n","plt.show()\n","\n","print(\"Coordenadas do vetor no sistema {A}:\")\n","print(\"[x]=[%f]\\n[y]=[%f]\" % (Va[0], Va[1]))\n","\n","RVb = np.dot(np.linalg.inv(R),Va)\n","print(\"\\nCoordenadas do vetor no sistema {B}:\")\n","print(\"[x]=[%f]\\n[y]=[%f]\" % (RVb[0], RVb[1]))\n","\n","RVc = np.dot(np.linalg.inv(R2) ,Va)\n","print(\"\\nCoordenadas do vetor no sistema {C}:\")\n","print(\"[x]=[%f]\\n[y]=[%f]\" % (RVc[0], RVc[1]))\n","print(\"\\nVerifique no gráfico a coerência das coordenadas!\")"]}]}